<!doctype html>
<html>
   <head>
      <meta charset="utf-8" />
      <title><%= title %></title>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
      <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>  
      <script src="http://code.createjs.com/easeljs-0.6.0.min.js"></script>
      
	  <script>
         var criteria;
         var locations;
         var missions;
         var firstCriterion = true;
		   var firstMission = true;
         var highlightShadow = new createjs.Shadow("#000022", 0, 0, 10);
         var views = [];
         var priority = [];
         
         var getIdKey = function(id) {
            return "id" + id;
         }
		          
         var createPfvView = function(id) {
            var o = new Object();
            o.stage = new createjs.Stage(id);
            o.stage.enableMouseOver(10);
            o.nextX = 0;
            o.currY = 0;
            o.nextY = 0;
            o.relationships = {};
            o.add = function(dispObj) {
               o.stage.addChild(dispObj);
               var key = getIdKey(dispObj.id);
               if (o.relationships[key] === undefined) {
                  o.relationships[key] = [];
               }
               o.stage.update();
            }
            o.remove = function(dispObj) {
               o.stage.removeChild(dispObj);
               o.stage.update();
            }
            o.width = function() {
               return o.stage.canvas.width;
            }
            o.height = function() {
               return o.stage.canvas.height;
            }
            o.selected = [];
            o.removed = [];
            o.toggleSelection = function(id) {
               var i = jQuery.inArray(id,o.selected);
               if (i < 0) {
                  o.selected.push(id);
               } else {
                  o.selected.splice(i,1);
               }
               return (i < 0);
            }
            o.isSelected = function(id) {
               return (jQuery.inArray(id,o.selected) >= 0);
            }
            views.push(o);
            return o;
         }
         
         var updateFilter = function() {
            jQuery.each(priority[0].removed, function(i, obj) {
               priority[0].add(obj);
            });
            priority[0].removed = [];
            var visible = [];
            for (var i = 0; i < priority.length - 1; i++) {
               var prevVisible = visible;
               visible = [];
               if (priority[i].selected.length > 0) {
                  jQuery.each(priority[i].selected, function(j, id) {
                     visible = visible.concat(priority[i].relationships[getIdKey(id)]);
                  });
               } else {
                  jQuery.each(priority[i].stage.children, function(j, node) {
                     visible = visible.concat(priority[i].relationships[getIdKey(node.id)]);
                  });
               }
               visible.sort();
               if (i > 0) {
                  var intersection = [];
                  while (prevVisible.length > 0 && visible.length > 0) {
                     if (prevVisible[0] < visible[0]) {
                        prevVisible.shift();
                     } else if (prevVisible[0] > visible[0]) {
                        visible.shift();
                     } else {
                        intersection.push(prevVisible.shift());
                        visible.shift();
                     }
                  }
                  visible = intersection;
               }
               for (var j = i + 1; j < priority.length; j++) {
                  var toRemove = [];
                  jQuery.each(priority[j].stage.children, function(k, child) {
                     if (jQuery.inArray(child.id, visible) < 0) {
                        toRemove.push(child);
                        if (child.selectionDecor) {
                           priority[j].toggleSelection(child.id);
                        }
                     }
                  });
                  var toAdd = [];
                  jQuery.each(priority[j].removed, function(k, child) {
                     if (jQuery.inArray(child.id, visible) >= 0) {
                        toAdd.push(child);
                     }
                  });
                  jQuery.each(toAdd, function(k, child) {
                     priority[j].stage.addChild(child);
                     priority[j].removed.splice(jQuery.inArray(child,priority[j].removed),1);
                  });
                  jQuery.each(toRemove, function(k, child) {
                     if (!child.selectionDecor) {
                        priority[j].removed.push(child);
                     }
                     priority[j].stage.removeChild(child);
                  });
               }
            }
            jQuery.each(priority, function(i, view) {
               view.stage.update();
            });
         }
         
         var isRelated = function(id1, id2) {
            if (id1 == id2) {
               return true;
            }
            
            var i = 0;
            while (i < views.length) {
               var rels = views[i].relationships[getIdKey(id1)];
               if (rels != undefined) {
                  return (jQuery.inArray(id2,rels) >= 0);
               }
               i++;
            }
            
            return false;
         }
         
         var highlightRelationships = function(id) {
            jQuery.each(views, function(i, view) {
               jQuery.each(view.stage.children, function(j, child) {
                  if (isRelated(id,child.id)) {
                     child.shadow = highlightShadow;
                  }
               });
               view.stage.update();
            });
         }
         
         var clearHighlights = function(id) {
            jQuery.each(views, function(i, view) {
               jQuery.each(view.stage.children, function(j, child) {
                  child.shadow = null;
               });
               view.stage.update();
            });
         }
         
         var createImage = function(view,node) {
            var bitmap = new createjs.Bitmap("/images/"+node.icon);
            bitmap.id = node.id;
            bitmap.scaleX = 100/bitmap.image.width;
            bitmap.scaleY = 100/bitmap.image.width;
            if ((view.width() - view.nextX) >= 100)
            {
               bitmap.x = view.nextX;
               view.nextX = view.nextX + 110;
               bitmap.y = view.currY;
            } else {
               bitmap.x = 5;
               view.nextX = 120;
               bitmap.y = view.currY = view.nextY;
               view.nextY = view.nextY + 110;
            }
            bitmap.addEventListener("mouseover", function(evt) {
               highlightRelationships(evt.target.id);
            });
            bitmap.addEventListener("mouseout", function(evt) {
               clearHighlights();
            });
            
            return bitmap;
         }
         
         var addCriteria = function(node, edges) {
            if (firstMission) {
               firstMission = false;
               criteria.nextX = 10;
               criteria.currY = 10;
               criteria.nextY = 120;
            }
            var bitmap = createImage(criteria,node);
            bitmap.selectionBox = new createjs.Shape();
            bitmap.selectionBox.id = node.id;
            bitmap.selectionBox.graphics.setStrokeStyle(4).beginStroke("#000000").drawRect(bitmap.x,bitmap.y,100,100);
            bitmap.selectionBox.selectionDecor = true;
            bitmap.addEventListener("click", function(evt) {
               var o = evt.target;
               if (criteria.toggleSelection(o.id)) {
                  criteria.add(o.selectionBox);
               } else {
                  criteria.remove(o.selectionBox);
               }
               updateFilter();
            });
            criteria.add(bitmap);
            
            jQuery.each(edges, function(i, edge) {
               if (edge.from_id == node.id) {
                  criteria.relationships[getIdKey(node.id)].push(edge.to_id);
                  jQuery.each(edges, function(j, edge2) {
                     if (edge2.to_id == edge.to_id) {
                        criteria.relationships[getIdKey(node.id)].push(edge2.from_id);
                     }
                  });
               }
            });
         }
         
         var addLocation = function(node, edges) {
            var text = new createjs.Text(node.label + '\n' + node.lat + ' degN, ' + node.long + ' degE');
            var x = (node.long + 78.5) * locations.width();
            text.x = x + 2;
            y = (43.5 - node.lat) * locations.height();
            text.y = y + 2;
            text.id = node.id;
            locations.add(text);
            var circle = new createjs.Shape();
            circle.graphics.beginFill("#00AA00").drawCircle(x,y,3);
            circle.id = node.id;
            circle.selectionRing = new createjs.Shape();
            circle.selectionRing.id = node.id;
            circle.selectionRing.graphics.setStrokeStyle(2).beginStroke("#000000").drawCircle(x,y,5);
            circle.selectionRing.selectionDecor = true;
            circle.addEventListener("click", function(evt) {
               var o = evt.target;
               if (locations.toggleSelection(o.id)) {
                  locations.add(o.selectionRing);
               } else {
                  locations.remove(o.selectionRing);
               }
               updateFilter();
            });
            circle.addEventListener("mouseover", function(evt) {
               highlightRelationships(evt.target.id);
            });
            circle.addEventListener("mouseout", function(evt) {
               clearHighlights();
            });
            locations.add(circle);
            
            jQuery.each(edges, function(i, edge) {
               if (edge.from_id == node.id) {
                  locations.relationships[getIdKey(node.id)].push(edge.to_id);
                  jQuery.each(edges, function(j, edge2) {
                     if (edge2.to_id == edge.to_id) {
                        locations.relationships[getIdKey(node.id)].push(edge2.from_id);
                     }
                  });
               }
            });
         }
         
         var addMission = function(node, edges) {
            if (firstCriterion) {
               firstCriterion = false;
               missions.nextX = 5;
               missions.currY = 5;
               missions.nextY = 110;
            }
            missions.add(createImage(missions,node));       
            
            jQuery.each(edges, function(i, edge) {
               if (edge.to_id == node.id) {
                  missions.relationships[getIdKey(node.id)].push(edge.from_id);
               }
            });
         }
         
         jQuery(function() {
            var jsonStatus = jQuery("#jsonStatus").html("Working...");
            criteria = createPfvView("criteria");
            locations = createPfvView("locations");
            missions = createPfvView("missions");
            var criteriaButton = jQuery("#criteriaButton");
            var locationsButton = jQuery("#locationsButton");
            
            criteriaButton.on("click", function() {
               priority = [criteria, locations, missions];
               updateFilter();
            });
            
            locationsButton.on("click", function() {
               priority = [locations, criteria, missions];
               updateFilter();
            });
            
            criteriaButton.trigger("click");
            
            jQuery.getJSON("/images/"+"missionGraph.json", function(data) {
               jQuery.each(data.nodes, function(i, node) {
                  switch (node.type) 
                  {
                     case "Criteria":
                        addCriteria(node,data.edges);
                        break;
                     case "Location":
                        addLocation(node,data.edges);
                        break;
                     case "Mission":
                        addMission(node,data.edges);
                        break;
                  }
               });
               jsonStatus.html("Data loaded.");
            }).fail(function() {jsonStatus.html("<b>FAIL</b>")});
         });
      </script>
   </head>
   <body>
      <h2>Select Criteria & Locations</h2>
      Higher Priority:
      <form>
         <input type="radio" id="criteriaButton" name="priority">Criteria<br>
         <input type="radio" id="locationsButton" name="priority">Locations
      </form> 
      <table border=1>
         <tr>
            <th>Criteria</th>
            <th>Locations</th>
         <tr>
            <td><canvas id="criteria" width="400" height="250"></canvas></td>
            <td><canvas id="locations" width="400" height="250"></canvas></td>
         </tr>
         <tr>
            <th colspan=2>Missions</th>
         </tr>
         <tr>
            <td colspan=2><canvas id="missions" width="800" height="250"></canvas></td>
         </tr>
      </table>
      <div id="jsonStatus">No script executed.</div>
   </body>
</html>